/*
 * Created on 4 Oct 2017 ( Time 15:33:30 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */

package com.iheartmeadia.POC.services;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.iheartmeadia.POC.model.TriggerLog;
import com.iheartmeadia.POC.respositories.TriggerLogRepository;
import com.iheartmedia.POC.exceptions.TriggerLogNotFoundException;

@Service
@Transactional(rollbackFor=TriggerLogNotFoundException.class)
public class TriggerLogService 
{
	private static Logger logger = LoggerFactory.getLogger(TriggerLogService.class);
	
	@Autowired
	private TriggerLogRepository triggerlogRepository;
		
	/*
	 * READ methods
	 */
	public Page<TriggerLog> findAll(int page, int count) {
		
		if (logger.isDebugEnabled())
			logger.debug("TriggerLogService -> findAll TriggerLogs");
		
		return triggerlogRepository.findAll(new PageRequest(page, count));
	}

	public Iterable<TriggerLog> findAll() {
		
		if (logger.isDebugEnabled())
			logger.debug("TriggerLogService -> findAll TriggerLogs");
		
		return triggerlogRepository.findAll();
	}
/*
	public TriggerLog findBySfid(String triggerlog){
		if (logger.isDebugEnabled())
			logger.debug("Retrieving TriggerLog with sfid:" + triggerlog);
		
		return triggerlogRepository.findBySfid(triggerlog);
		
	}
*/
	public TriggerLog get(int id) {
		if (logger.isDebugEnabled())
			logger.debug("Retrieving TriggerLog with id:" + id);
		
		TriggerLog elementToGet = triggerlogRepository.findOne(id);
		
		if (elementToGet == null)
			throw new TriggerLogNotFoundException(id);
		
		return elementToGet;
	}

	public TriggerLog create(TriggerLog triggerlog) {

		if (logger.isDebugEnabled())
			logger.debug("TriggerLogService -> create:" + triggerlog);
			
		return triggerlogRepository.save(triggerlog);
	}

	public TriggerLog update(TriggerLog triggerlog) {
		
		if (logger.isDebugEnabled())
			logger.debug("TriggerLogService -> create:" + triggerlog);

		TriggerLog elementToUpdate = triggerlogRepository.findOne(triggerlog.getId());
		
		if (elementToUpdate == null)
			throw new TriggerLogNotFoundException(triggerlog.getId());
		
		elementToUpdate.update(triggerlog);
		triggerlogRepository.save(elementToUpdate);
		
		return elementToUpdate;
	}

	public TriggerLog delete(int id) {
		if (logger.isDebugEnabled())
			logger.debug("TriggerLogService -> delete:" + id);

		TriggerLog elementToDelete = get(id);
		
		if (elementToDelete == null)
			throw new TriggerLogNotFoundException(id);
		
		triggerlogRepository.delete(elementToDelete);

		return elementToDelete;
	}

}

